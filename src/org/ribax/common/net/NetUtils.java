package org.ribax.common.net;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;

import java.util.ArrayList;

import org.ribax.common.ConfigStrings;
import org.ribax.common.Messages;
import org.ribax.common.RIBAXConfig;
import org.ribax.common.data.DataUtils;
import org.ribax.common.net.DataSource;
import org.ribax.common.net.DataSourceFactory;

import utils.log.BasicLogger;
import utils.types.NameValuePair;

/**
 * Static utility methods for reading XML blocks from a web service.
 *
 * @version <tt>$Revision: $</tt>
 * @author  <a href="mailto:damian@ribax.org">Damian Hamill</a>
 */
public class NetUtils {

    private static final String BUNDLE_NAME = "org.ribax.common.net.messages"; //$NON-NLS-1$
    private static BasicLogger LOG = new BasicLogger(DataUtils.class.getName());

    /**
     * Get an input stream to read from a web service.
     * 
     * @param url the URL of the web service.
     * @param params a set of parameters to post to the web service.
     * @param name the name of the Object opening the stream (for debugging).
     * @return the input stream ready for reading 
     * @throws IOException if an IO error occurs
     */
    public static InputStream getInputStream(String url, ArrayList<NameValuePair> params, String name) throws IOException {
        ArrayList<NameValuePair> tlist;

        if (params == null) {
            params = new ArrayList<NameValuePair>();
        }

        RIBAXConfig config = RIBAXConfig.getInstance();

        // add the base params
        tlist = (ArrayList<NameValuePair>) config.getValue(ConfigStrings.BASE_PARAMS, null);

        if (tlist != null) {
            params.addAll(tlist);
        }

        // get a data source for the given URL
        DataSource dataSource = DataSourceFactory.getDataSource(url, name);

        try {
            // get the input stream and return it
            return dataSource.getInputStream(params);

        } catch (IOException ex) {
            LOG.error(Messages.getString(BUNDLE_NAME, "NetUtils.0") + url, ex); //$NON-NLS-1$
            throw (ex);
        }
    }

     private static void nullParameterWarning(NameValuePair pair) {
        if (pair == null) {
            LOG.warning("parameter NameValuePair is null");
        } else {
            LOG.warning("NameValuePair parameter contains null elements name:" + pair.getName() + " value:" + pair.getValue());
        }
    }

    /**
     * Create a ByteArrayInputStream from the given parameters.
     *
     * @param envp a set of headers which are modified by adding content length
     * multipart boundary tags.
     * @param params a set of parameters to add to the stream.
     * @return the generated ByteArrayInputStream.
     * @throws Exception
     */
    public static ByteArrayInputStream getByteArrayInputStream(ArrayList<String> envp, ArrayList<NameValuePair> params) throws Exception {

        LOG.debug("convert parameters to CGI inputstream parameters");

        // create a ByteArrayOutputStream and write the parameters to the stream
        ByteArrayOutputStream baos = new ByteArrayOutputStream();

        HTTPmultipart mp = null;
        ArrayList<Part> content = new ArrayList<Part>();

        int length = 0;

        if (params != null && params.size() > 0) {
            mp = new HTTPmultipart();
            String boundary = new String(mp.getBoundary());
            envp.add("BOUNDARY=" + boundary);
            envp.add("CONTENT_TYPE=multipart/form-data; boundary=\"" + boundary + "\"");

            // determine the content length and save the parts to the content list

            for (NameValuePair pair : params) {

                if (pair.getName() == null || pair.getValue() == null) {
                    nullParameterWarning(pair);
                    continue;
                }

                if ("file".equals(pair.getMimeType())) {
                    File f = new File(pair.getValue().toString());

                    if (f == null) {
                        nullParameterWarning(pair);
                        continue;
                    }
                    FilePart part = new FilePart(pair.getName(), f);
                    content.add(part);
                    length += mp.getContentLength(part);
                } else {
                    StringPart part = new StringPart(pair.getName(), pair.getValue().toString());
                    content.add(part);
                    length += mp.getContentLength(part);
                }
                LOG.debug("write parameter name:" + pair.getName());
            }

            // add the length of the final boundary
            length += PartUtils.EXTRA_BYTES.length + mp.getBoundary().length
                    + PartUtils.EXTRA_BYTES.length + PartUtils.CRLF_BYTES.length;

            // write the parts to the output stream
            for (Part part : content) {
                mp.writePart(baos, part);

            }
            // write the final boundary
            baos.write(PartUtils.EXTRA_BYTES);
            baos.write(mp.getBoundary());
            baos.write(PartUtils.EXTRA_BYTES);
            baos.write(PartUtils.CRLF_BYTES);

        }

        // set the content length header
        envp.add("CONTENT_LENGTH=" + length);
        LOG.debug("set content-length header: " + length);

        return new ByteArrayInputStream(baos.toByteArray());
    }
}
